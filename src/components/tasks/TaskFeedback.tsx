import { useMemo } from 'react';
import { RepoState, Assertion } from '@/git/types';
import { checkAssertion } from '@/tasks/assertions';
import { Badge } from '@/components/ui/badge';
import { CheckCircle2, XCircle, AlertCircle } from 'lucide-react';

interface TaskFeedbackProps {
  currentState: RepoState;
  targetAssertions: Assertion[];
  className?: string;
}

export function TaskFeedback({ currentState, targetAssertions, className }: TaskFeedbackProps) {
  const results = useMemo(() => {
    return targetAssertions.map(assertion => ({
      assertion,
      passed: checkAssertion(currentState, assertion),
      description: getAssertionDescription(assertion)
    }));
  }, [currentState, targetAssertions]);

  const allPassed = results.every(r => r.passed);

  return (
    <div className={`space-y-3 ${className || ''}`}>
      <div className="flex items-center gap-2">
        {allPassed ? (
          <>
            <CheckCircle2 className="w-5 h-5 text-green-500" />
            <span className="font-medium text-green-700 dark:text-green-400">
              –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üéâ
            </span>
          </>
        ) : (
          <>
            <AlertCircle className="w-5 h-5 text-amber-500" />
            <span className="font-medium">
              –ü—Ä–æ–≥—Ä–µ—Å—Å: {results.filter(r => r.passed).length} –∏–∑ {results.length}
            </span>
          </>
        )}
      </div>

      <div className="space-y-2">
        {results.map((result, i) => (
          <div key={i} className="flex items-start gap-2 text-sm">
            {result.passed ? (
              <CheckCircle2 className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
            ) : (
              <XCircle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
            )}
            <span className={result.passed ? 'text-green-700 dark:text-green-400' : ''}>
              {result.description}
            </span>
            <Badge 
              variant={result.passed ? 'default' : 'outline'}
              className="ml-auto"
            >
              {result.passed ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–¢—Ä–µ–±—É–µ—Ç—Å—è'}
            </Badge>
          </div>
        ))}
      </div>
    </div>
  );
}

function getAssertionDescription(assertion: Assertion): string {
  switch (assertion.type) {
    case 'HEAD_AT_BRANCH':
      return `HEAD –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤–µ—Ç–∫—É "${assertion.branch}"`;
    
    case 'BRANCH_AT_COMMIT':
      return `–í–µ—Ç–∫–∞ "${assertion.branch}" –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–º–∏—Ç ${assertion.commit}`;
    
    case 'IS_FAST_FORWARD':
      return `–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–º–æ–∂–µ–Ω fast-forward merge –∏–∑ "${assertion.fromBranch}" –≤ "${assertion.targetBranch}"`;
    
    case 'HAS_MERGE_COMMIT_ON_BRANCH':
      return `–ù–∞ –≤–µ—Ä—à–∏–Ω–µ –≤–µ—Ç–∫–∏ "${assertion.branch}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å merge-–∫–æ–º–º–∏—Ç`;
    
    case 'BRANCH_CONTAINS_COMMITS':
      return `–í–µ—Ç–∫–∞ "${assertion.branch}" –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–º–º–∏—Ç—ã: ${assertion.commits.join(', ')}`;
    
    case 'LINEAR_HISTORY':
      return `–í–µ—Ç–∫–∞ "${assertion.branch}" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ª–∏–Ω–µ–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é`;
    
    case 'HEAD_AT_COMMIT':
      return `HEAD –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–º–∏—Ç ${assertion.commit}`;
    
    case 'COMMIT_COUNT_ON_BRANCH':
      if (assertion.eq !== undefined) {
        return `–í–µ—Ç–∫–∞ "${assertion.branch}" –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ ${assertion.eq} –∫–æ–º–º–∏—Ç–æ–≤`;
      }
      if (assertion.gte !== undefined) {
        return `–í–µ—Ç–∫–∞ "${assertion.branch}" –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${assertion.gte} –∫–æ–º–º–∏—Ç–æ–≤`;
      }
      return `–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–∏—Ç–æ–≤ –Ω–∞ –≤–µ—Ç–∫–µ "${assertion.branch}"`;
    
    case 'BRANCH_EXISTS':
      return assertion.exists 
        ? `–í–µ—Ç–∫–∞ "${assertion.branch}" –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å`
        : `–í–µ—Ç–∫–∞ "${assertion.branch}" –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å`;
    
    case 'EITHER':
      return `–î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π (${assertion.anyOf.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)`;
    
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ';
  }
}